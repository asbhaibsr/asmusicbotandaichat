import random
import g4f
import asyncio
import httpx
import google.generativeai as genai

# Google AI рдмрд┐рдирд╛ key рдХреЗ рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдЧрд╛, fallback рдореЗрдВ рд╣реА use рд╣реЛрдЧрд╛
try:
    genai.configure(api_key=None)  # FREE рдирд╣реАрдВ рд╣реИ, fallback handle рдХрд┐рдпрд╛ рд╣реИ
except:
    pass

# MAIN FUNCTION
async def generate_ai_reply(message: str) -> str:
    try:
        reply = await gpt_g4f(message)
        return reply
    except Exception:
        try:
            reply = await gpt_gemini(message)
            return reply
        except Exception:
            return ai_failed_message()

# g4f (free backend)
async def gpt_g4f(prompt):
    response = await g4f.ChatCompletion.create_async(
        model=g4f.models.gpt_35_turbo,
        messages=[{"role": "user", "content": prompt}]
    )
    return response

# Google Gemini (API key рдирд╣реАрдВ рд╣реЛрдиреЗ рдкрд░ рднреА fallback рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ)
async def gpt_gemini(prompt):
    model = genai.GenerativeModel("gemini-pro")
    chat = model.start_chat()
    response = chat.send_message(prompt)
    return response.text

# Agar dono fail ho jaaye to
def ai_failed_message():
    return "ЁЯдЦ AI рдЕрднреА busy рд╣реИ!\n\nЁЯСЗ рдиреАрдЪреЗ рд╕реЗ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдФрд░ рдореВрд╡реА рдЧреНрд░реБрдк рдЬреЙрдЗрди рдХрд░реЗрдВ:\n\nЁЯУв @asbhai_bsr\nЁЯОм @iStreamX"
