import random
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# G4F import
try:
    import g4f
    from g4f.client import Client
except ImportError:
    g4f = None

# ЁЯМЯ Fallback message with buttons
def fallback_message():
    return (
        "тЪая╕П рдЕрднреА AI рдЬрд╡рд╛рдм рджреЗрдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд рдЖ рд░рд╣реА рд╣реИред\n\n"
        "ЁЯФБ рдХреГрдкрдпрд╛ рдереЛрдбрд╝реА рджреЗрд░ рдмрд╛рдж рдлрд┐рд░ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред\n\n"
        "ЁЯСЗ рддрдм рддрдХ рд╣рдорд╛рд░реЗ рдЪреИрдирд▓ рдФрд░ рдЧреНрд░реБрдк рд╕реЗ рдЬреБрдбрд╝реЗрдВ:",
        InlineKeyboardMarkup([
            [InlineKeyboardButton("ЁЯОм Movie Group", url="https://t.me/iStreamX")],
            [InlineKeyboardButton("ЁЯУв Update Channel", url="https://t.me/asbhai_bsr")]
        ])
    )

# тЬЕ Free AI рдЬрд╡рд╛рдм рджреЗрдиреЗ рд╡рд╛рд▓рд╛ function
async def generate_ai_reply(user_message):
    if g4f:
        try:
            client = Client()
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[{"role": "user", "content": user_message}],
            )
            return response.choices[0].message.content, None
        except Exception as e:
            print("тЭМ G4F error:", e)

    # fallback message рдЕрдЧрд░ AI рдлреЗрд▓ рд╣реЛ рдЬрд╛рдП
    return fallback_message()
