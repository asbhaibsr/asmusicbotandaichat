import os
import asyncio
from threading import Thread
from pyrogram import Client, filters, idle
from pyrogram.types import Message
from pytgcalls import PyTgCalls
from motor.motor_asyncio import AsyncIOMotorClient
from config import API_ID, API_HASH, BOT_TOKEN, MONGO_URI
from helpers.clean import auto_clean  # ‡§Ü‡§™‡§ï‡§æ existing clean ‡§Æ‡•â‡§°‡•ç‡§Ø‡•Ç‡§≤
from keep_alive import keep_alive

# ---------------------------------------------------
# 1) Flask keep-alive ‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§ï‡•ã ‡§¨‡•à‡§ï‡§ó‡•ç‡§∞‡§æ‡§â‡§Ç‡§° ‡§•‡•ç‡§∞‡•á‡§° ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç
# ---------------------------------------------------
Thread(target=keep_alive, daemon=True).start()

# ---------------------------------------------------
# 2) Pyrogram Bot Client ‡§î‡§∞ PyTgCalls ‡§∏‡•á‡§ü‡§Ö‡§™
# ---------------------------------------------------
app = Client(
    "MusicBot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN,
    # parse_mode="html"  # ‡§Ö‡§ó‡§∞ HTML parse ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç ‡§§‡•ã uncomment ‡§ï‡§∞‡•á‡§Ç
)
pytgcalls = PyTgCalls(app)

# ---------------------------------------------------
# 3) MongoDB Setup (chatmode collection ‡§Æ‡•á‡§Ç AI toggle ‡§∏‡•ç‡§ü‡•ã‡§∞ ‡§π‡•ã‡§ó‡§æ)
# ---------------------------------------------------
db = AsyncIOMotorClient(MONGO_URI).botdb
chatdb = db.chatmode

# ---------------------------------------------------
# 4) Command Handlers
# ---------------------------------------------------

# /start in private chat
@app.on_message(filters.command("start") & filters.private)
async def start_msg(_, message: Message):
    await message.reply_text(
        "üå∏ Hello! I'm your Yukki-style Music + AI Chat Bot.\n\n"
        "üé∂ Use /play <song name> in groups.\n"
        "üß† Use /ai_on or /ai_off to toggle AI Chat in group.\n\n"
        "üîó Movie Group: @iStreamX\nüì¢ Updates: @asbhai_bsr"
    )

# /ai_on in group
@app.on_message(filters.command("ai_on") & filters.group)
async def ai_on(_, message: Message):
    await chatdb.update_one(
        {"chat_id": message.chat.id},
        {"$set": {"ai": True}},
        upsert=True
    )
    await message.reply_text("ü§ñ AI Chat Enabled in this group!")

# /ai_off in group
@app.on_message(filters.command("ai_off") & filters.group)
async def ai_off(_, message: Message):
    await chatdb.update_one(
        {"chat_id": message.chat.id},
        {"$set": {"ai": False}},
        upsert=True
    )
    await message.reply_text("üîá AI Chat Disabled in this group.")

# AI Chat handler: ‡§ï‡•á‡§µ‡§≤ ‡§§‡§¨ ‡§ú‡§¨ AI ON ‡§π‡•ã
@app.on_message(filters.text & filters.group)
async def ai_reply(_, message: Message):
    data = await chatdb.find_one({"chat_id": message.chat.id})
    if data and data.get("ai") is True:
        if message.text.startswith("/"):
            return
        # ‡§Ø‡§π‡§æ‡§Å ‡§Ü‡§™ ‡§Ö‡§∏‡§≤‡•Ä AI ‡§≤‡•â‡§ú‡§ø‡§ï ‡§≤‡§ó‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
        reply = f"üí¨ (AI): Tumne kaha: {message.text}"
        await message.reply_text(reply)

# /play placeholder (‡§Ü‡§™ ‡§Ø‡§π‡§æ‡§Å music logic ‡§ú‡•ã‡§°‡§º‡•á‡§Ç)
@app.on_message(filters.command("play") & filters.group)
async def play_music(_, message: Message):
    await message.reply_text("üéß Playing music feature will be handled here soon!")

# ---------------------------------------------------
# 5) Main Start Function
# ---------------------------------------------------
async def run():
    # Bot start
    await app.start()
    # PyTgCalls start (‡§Ö‡§ó‡§∞ music ‡§ú‡•ã‡§°‡§º ‡§∞‡§π‡•á ‡§π‡•à‡§Ç)
    try:
        await pytgcalls.start()
    except Exception as e:
        # ‡§Ö‡§ó‡§∞ PyTgCalls ‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó‡§∞‡•á‡§∂‡§® ‡§Æ‡•á‡§Ç error ‡§Ü‡§è ‡§§‡•ã ‡§≤‡•â‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç
        print(f"[WARN] PyTgCalls start error: {e}")
    # auto_clean task (‡§Ø‡§¶‡§ø helpers.clean.auto_clean ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à)
    try:
        asyncio.create_task(auto_clean())
    except Exception as e:
        print(f"[WARN] auto_clean task error: {e}")

    print("ü§ñ Bot is running with AI + Music!")
    # Idle ‡§∞‡§ñ‡•á ‡§ú‡§¨ ‡§§‡§ï manual stop ‡§Ø‡§æ instance stop ‡§® ‡§π‡•ã
    await idle()
    # Cleanup on stop (‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ optional; Koyeb instance ‡§¨‡§Ç‡§¶ ‡§π‡•ã‡§§‡•á ‡§∏‡§Æ‡§Ø ‡§¨‡•â‡§ü ‡§ï‡•ã ‡§†‡•Ä‡§ï ‡§∏‡•á ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§ó‡§æ)
    await app.stop()

if __name__ == "__main__":
    # asyncio.run(run())  # ‡§Ü‡§Æ ‡§§‡•å‡§∞ ‡§™‡§∞ ‡§Ø‡§π‡•Ä ‡§ö‡§≤‡•á‡§ó‡§æ
    # ‡§ï‡§≠‡•Ä-‡§ï‡§≠‡•Ä nested loop issue ‡§π‡•ã ‡§§‡•ã alternate ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:
    try:
        asyncio.get_event_loop().run_until_complete(run())
    except RuntimeError:
        asyncio.run(run())
