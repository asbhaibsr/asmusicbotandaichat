import os
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# pyrogram-voice-chat ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§™‡§æ‡§•
from pyrogram_voice_chat import VoiceChatClient # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ‡§µ

from motor.motor_asyncio import AsyncIOMotorClient
from config import API_ID, API_HASH, BOT_TOKEN, MONGO_URI
from pyrogram import idle
from helpers.clean import auto_clean
from ai import generate_ai_reply

# üéµ Music command handlers
from commands.play import play_handler
from commands.pause import pause_handler
from commands.resume import resume_handler
from commands.leave import leave_handler
from commands.stop import stop_handler

# Bot client
app = Client("MusicBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
# VoiceChatClient ‡§ï‡§æ ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§¨‡§®‡§æ‡§®‡§æ
voice_chat_client = VoiceChatClient(app) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ‡§µ, ‡§®‡§æ‡§Æ ‡§≠‡•Ä ‡§¨‡§¶‡§≤‡§æ ‡§§‡§æ‡§ï‡§ø ‡§ï‡§®‡•ç‡§´‡•ç‡§Ø‡•Ç‡§ú ‡§® ‡§π‡•ã

# MongoDB setup
db = AsyncIOMotorClient(MONGO_URI).botdb
chatdb = db.chatmode

# /start command (private chat)
@app.on_message(filters.command("start") & filters.private)
async def start_msg(_, message: Message):
    buttons = [
        [InlineKeyboardButton("üéß Add Me to Group", url=f"https://t.me/{app.me.username}?startgroup=true")],
        [InlineKeyboardButton("üì¢ Update Channel", url="https://t.me/asbhai_bsr"),
         InlineKeyboardButton("üé¨ Movie Group", url="https://t.me/iStreamX")]
    ]
    await message.reply_text(
        "üå∏ ùóõùó≤ùóπùóπùóº! ùó†ùó≤ùó∂ùóª ùóòùó∏ ùóôùòÇùóπùóπ ùóôùó≤ùóÆùòÅùòÇùóøùó≤ ùó†ùòÇùòÄùó∂ùó∞ + ùóîùóú ùóöùó∂ùóøùóπ ùóïùóºùòÅ ùóõùòÇùóª üíñ\n\n"
        "üé∂ Use /play <song name> in groups.\n"
        "üß† Use /ai_on or /ai_off to toggle AI Chat in group.\n\n"
        "üîó Movie Group: @iStreamX\nüì¢ Updates: @asbhai_bsr",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# AI on/off
@app.on_message(filters.command("ai_on") & filters.group)
async def enable_ai(_, message: Message):
    await chatdb.update_one({"chat_id": message.chat.id}, {"$set": {"ai": True}}, upsert=True)
    await message.reply_text("‚úÖ AI Chat Enabled in this group!")

@app.on_message(filters.command("ai_off") & filters.group)
async def disable_ai(_, message: Message):
    await chatdb.update_one({"chat_id": message.chat.id}, {"$set": {"ai": False}}, upsert=True)
    await message.reply_text("‚ùå AI Chat Disabled in this group.")

# Group AI reply
@app.on_message(filters.text & filters.group & ~filters.command(["ai_on", "ai_off", "play"]))
async def group_ai_reply(_, message: Message):
    data = await chatdb.find_one({"chat_id": message.chat.id})
    if data and data.get("ai") is True:
        if message.text.startswith("/"):
            return
        reply = await generate_ai_reply(message.text)

        # Fallback message check
        if isinstance(reply, tuple):
            text, markup = reply
            await message.reply_text(text, reply_markup=markup)
        else:
            await message.reply_text(reply)

# Music Commands - **‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§Ø‡§π‡§æ‡§Å voice_chat_client ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç**
# ‡§∏‡§æ‡§• ‡§π‡•Ä, commands/play.py, commands/pause.py, ‡§Ü‡§¶‡§ø ‡§Æ‡•á‡§Ç ‡§≠‡•Ä ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§ï‡§∞‡§®‡•á ‡§π‡•ã‡§Ç‡§ó‡•á
# ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø ‡§ë‡§¨‡•ç‡§ú‡•á‡§ï‡•ç‡§ü ‡§ï‡§æ ‡§®‡§æ‡§Æ ‡§î‡§∞ ‡§â‡§∏‡§ï‡•á ‡§Æ‡•á‡§•‡§°‡•ç‡§∏ pyrogram-voice-chat ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§π‡•ã‡§Ç‡§ó‡•á.
# ‡§Ø‡§π ‡§∏‡§¨‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§π‡•ã‡§ó‡§æ.

@app.on_message(filters.command("play") & filters.group)
async def play_command(_, message: Message):
    # play_handler ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ VoiceChatClient ‡§ï‡•á ‡§Æ‡•á‡§•‡§°‡•ç‡§∏ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡§ó‡§æ
    await play_handler(voice_chat_client, message) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ

@app.on_message(filters.command("pause") & filters.group)
async def pause_command(_, message: Message):
    await pause_handler(voice_chat_client, message) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ

@app.on_message(filters.command("resume") & filters.group)
async def resume_command(_, message: Message):
    await resume_handler(voice_chat_client, message) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ

@app.on_message(filters.command("stop") & filters.group)
async def stop_command(_, message: Message):
    await stop_handler(voice_chat_client, message) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ

@app.on_message(filters.command("leave") & filters.group)
async def leave_command(_, message: Message):
    await leave_handler(voice_chat_client, message) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ

# Main start
async def main():
    await app.start()
    # pyrogram-voice-chat ‡§ï‡•ã ‡§∏‡•ç‡§ü‡§æ‡§∞‡•ç‡§ü ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§•‡•ã‡§°‡§º‡§æ ‡§Ö‡§≤‡§ó ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à
    # ‡§Ü‡§Æ‡§§‡•å‡§∞ ‡§™‡§∞, VoiceChatClient ‡§ï‡•ã ‡§∏‡•Ä‡§ß‡•á start() ‡§Æ‡•á‡§•‡§° ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à,
    # ‡§Ø‡§π Pyrogram ‡§ï‡•ç‡§≤‡§æ‡§á‡§Ç‡§ü ‡§ï‡•á ‡§∏‡§æ‡§• ‡§á‡§Ç‡§ü‡§∞‡•à‡§ï‡•ç‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à.
    # ‡§π‡§Æ ‡§á‡§∏‡•á ‡§π‡§ü‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§¶‡•á‡§ñ‡•á‡§Ç‡§ó‡•á ‡§ï‡§ø ‡§Ø‡§π ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à.
    # ‡§Ö‡§ó‡§∞ ‡§è‡§∞‡§∞ ‡§Ü‡§§‡§æ ‡§π‡•à, ‡§§‡•ã ‡§π‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§™‡§∞ pyrogram-voice-chat ‡§ï‡•á docs ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ start ‡§Æ‡•á‡§•‡§° ‡§ú‡•ã‡§°‡§º‡•á‡§Ç‡§ó‡•á.
    # await voice_chat_client.start() # <--- ‡§Ø‡§π ‡§≤‡§æ‡§á‡§® ‡§π‡§ü‡§æ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à, ‡§Ö‡§ó‡§∞ ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§™‡§°‡§º‡•Ä ‡§§‡•ã ‡§µ‡§æ‡§™‡§∏ ‡§≤‡§æ‡§è‡§Ç‡§ó‡•á.
    
    asyncio.create_task(auto_clean())
    print("‚úÖ Bot is Live with AI + Music!")
    await idle()
    await app.stop()

if __name__ == "__main__":
    asyncio.run(main())
