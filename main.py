import os
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

# Py-TgCalls-Group ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§π‡•Ä ‡§á‡§Æ‡•ç‡§™‡•ã‡§∞‡•ç‡§ü ‡§™‡§æ‡§•
from py_tgcalls_group import PyTgCalls # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ‡§µ

from motor.motor_asyncio import AsyncIOMotorClient
from config import API_ID, API_HASH, BOT_TOKEN, MONGO_URI
from pyrogram import idle
from helpers.clean import auto_clean
from ai import generate_ai_reply

# üéµ Music command handlers
from commands.play import play_handler
from commands.pause import pause_handler
from commands.resume import resume_handler
from commands.leave import leave_handler
from commands.stop import stop_handler

# Bot client
app = Client("MusicBot", api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)
# PyTgCalls ‡§ï‡§æ ‡§á‡§Ç‡§∏‡•ç‡§ü‡•á‡§Ç‡§∏ ‡§¨‡§®‡§æ‡§®‡§æ
pytgcalls = PyTgCalls(app) # <--- ‡§Ø‡§π‡§æ‡§Å ‡§¨‡§¶‡§≤‡§æ ‡§π‡•à (PyTgCallsClient ‡§ï‡•Ä ‡§ú‡§ó‡§π PyTgCalls)

# MongoDB setup
db = AsyncIOMotorClient(MONGO_URI).botdb
chatdb = db.chatmode

# /start command (private chat)
@app.on_message(filters.command("start") & filters.private)
async def start_msg(_, message: Message):
    buttons = [
        [InlineKeyboardButton("üéß Add Me to Group", url=f"https://t.me/{app.me.username}?startgroup=true")],
        [InlineKeyboardButton("üì¢ Update Channel", url="https://t.me/asbhai_bsr"),
         InlineKeyboardButton("üé¨ Movie Group", url="https://t.me/iStreamX")]
    ]
    await message.reply_text(
        "üå∏ ùóõùó≤ùóπùóπùóº! ùó†ùó≤ùó∂ùóª ùóòùó∏ ùóôùòÇùóπùóπ ùóôùó≤ùóÆùòÅùòÇùóøùó≤ ùó†ùòÇùòÄùó∂ùó∞ + ùóîùóú ùóöùó∂ùóøùóπ ùóïùóºùòÅ ùóõùòÇùóª üíñ\n\n"
        "üé∂ Use /play <song name> in groups.\n"
        "üß† Use /ai_on or /ai_off to toggle AI Chat in group.\n\n"
        "üîó Movie Group: @iStreamX\nüì¢ Updates: @asbhai_bsr",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

# AI on/off
@app.on_message(filters.command("ai_on") & filters.group)
async def enable_ai(_, message: Message):
    await chatdb.update_one({"chat_id": message.chat.id}, {"$set": {"ai": True}}, upsert=True)
    await message.reply_text("‚úÖ AI Chat Enabled in this group!")

@app.on_message(filters.command("ai_off") & filters.group)
async def disable_ai(_, message: Message):
    await chatdb.update_one({"chat_id": message.chat.id}, {"$set": {"ai": False}}, upsert=True)
    await message.reply_text("‚ùå AI Chat Disabled in this group.")

# Group AI reply
@app.on_message(filters.text & filters.group & ~filters.command(["ai_on", "ai_off", "play"]))
async def group_ai_reply(_, message: Message):
    data = await chatdb.find_one({"chat_id": message.chat.id})
    if data and data.get("ai") is True:
        if message.text.startswith("/"):
            return
        reply = await generate_ai_reply(message.text)

        # Fallback message check
        if isinstance(reply, tuple):
            text, markup = reply
            await message.reply_text(text, reply_markup=markup)
        else:
            await message.reply_text(reply)

# Music Commands - **‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£: ‡§á‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ ‡§ï‡•ã PyTgCalls (py-tgcalls-group ‡§∏‡•á) ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§ú‡§∏‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à**
# PyTgCalls ‡§Æ‡•á‡§Ç ‡§•‡•ã‡§°‡§º‡•á ‡§Ö‡§≤‡§ó ‡§Æ‡•á‡§•‡§° ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§Ø‡§æ ‡§Ö‡§≤‡§ó ‡§Ü‡§∞‡•ç‡§ó‡•Å‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•Ä ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à.
# ‡§Ö‡§≠‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡§æ‡§® ‡§≤‡•á‡§Ç ‡§ï‡§ø ‡§µ‡•á ‡§è‡§ï ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§∏‡§Ç‡§ó‡§§ ‡§π‡•à‡§Ç.
# ‡§Ø‡§¶‡§ø ‡§∏‡§´‡§≤ ‡§°‡§ø‡§™‡•ç‡§≤‡•â‡§Ø‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§™‡•ç‡§≤‡•á/‡§™‡•â‡§ú‡§º/‡§Ü‡§¶‡§ø ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§µ‡§ø‡§´‡§≤ ‡§π‡•ã ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§Ø‡§π ‡§Ö‡§ó‡§≤‡•Ä ‡§ú‡§ó‡§π ‡§π‡•ã‡§ó‡•Ä ‡§ú‡§π‡§æ‡§Å ‡§¶‡•á‡§ñ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ.

@app.on_message(filters.command("play") & filters.group)
async def play_command(_, message: Message):
    await play_handler(pytgcalls, message)

@app.on_message(filters.command("pause") & filters.group)
async def pause_command(_, message: Message):
    await pause_handler(pytgcalls, message)

@app.on_message(filters.command("resume") & filters.group)
async def resume_command(_, message: Message):
    await resume_handler(pytgcalls, message)

@app.on_message(filters.command("stop") & filters.group)
async def stop_command(_, message: Message):
    await stop_handler(pytgcalls, message)

@app.on_message(filters.command("leave") & filters.group)
async def leave_command(_, message: Message):
    await leave_handler(pytgcalls, message)

# Main start
async def main():
    await app.start()
    await pytgcalls.start() # ‡§á‡§∏‡§Æ‡•á‡§Ç ‡§≠‡•Ä PyTgCalls ‡§ï‡•á ‡§≤‡§ø‡§è ‡§è‡§°‡§ú‡§∏‡•ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à
    asyncio.create_task(auto_clean())
    print("‚úÖ Bot is Live with AI + Music!")
    await idle()
    await app.stop()

if __name__ == "__main__":
    asyncio.run(main())
